{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Lab 5: House Candidate Positioning Graph Recreations"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In this lab, we'll be recreating Figure 1 from this paper titled [Candidate Positioning in U.S. Elections](https://www-jstor-org.libproxy.berkeley.edu/stable/2669364?seq=1#metadata_info_tab_contents). The table we will be recreating shows the estimated issue positions of all Democrats and Republicans running for House positions in 2000 plotted against the conservatism of their district. We'll see that candidates tend to take positions according to the convervatism of their district with little deviation across party lines. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Run the next cell to import the libraries we'll be using to do our analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import json\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from scipy.stats import linregress"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Below, you'll find a chart containing labels of the columns in the dataset we'll be working with for this lab: "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "| Variable | Meaning       |\n",
    "|--------|------------------------|\n",
    "| Gore    | % of candidate's district that voted for Gore in '00 |\n",
    "| Bush '00     | % of candidate's district that voted for Bush in '00          |\n",
    "| location   | candidate's state and district number               |\n",
    "| first_name     | candidate's first name         |\n",
    "| middle_name     | candidate's middle name         |  \n",
    "| last_name     | candidate's last name      |  \n",
    "| votes_with_party_pct    | % of times the candidate voted with their party in the previous Congressional session        |  \n",
    "| votes_against_party_pct    | % of times the candidate voted against their party in the previous Congressional session           | \n",
    "| party    | candidate's party         | \n",
    "| Member Position    | 0-1 scale for how conservative a candidate's stances are (0=lowest conservative, 1=highest conservative)         | "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Load Data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For our analysis, we'll be using district-level data on House members in the 106th Congress and their district behavior from the 2000 presidential election. \n",
    "\n",
    "We'll begin by loading our file housedata.csv into a pandas dataframe named df."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>State</th>\n",
       "      <th>Gore</th>\n",
       "      <th>Bush '00</th>\n",
       "      <th>location</th>\n",
       "      <th>first_name</th>\n",
       "      <th>middle_name</th>\n",
       "      <th>last_name</th>\n",
       "      <th>district</th>\n",
       "      <th>votes_with_party_pct</th>\n",
       "      <th>votes_against_party_pct</th>\n",
       "      <th>party</th>\n",
       "      <th>suffix</th>\n",
       "      <th>gender</th>\n",
       "      <th>geoid</th>\n",
       "      <th>Member Position</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>AK</td>\n",
       "      <td>0.28</td>\n",
       "      <td>0.59</td>\n",
       "      <td>AK1</td>\n",
       "      <td>Don</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Young</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.92</td>\n",
       "      <td>0.0757</td>\n",
       "      <td>R</td>\n",
       "      <td>NaN</td>\n",
       "      <td>M</td>\n",
       "      <td>200.0</td>\n",
       "      <td>0.92</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>AL</td>\n",
       "      <td>0.38</td>\n",
       "      <td>0.60</td>\n",
       "      <td>AL1</td>\n",
       "      <td>Sonny</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Callahan</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.94</td>\n",
       "      <td>0.0589</td>\n",
       "      <td>R</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>101.0</td>\n",
       "      <td>0.94</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>AL</td>\n",
       "      <td>0.38</td>\n",
       "      <td>0.61</td>\n",
       "      <td>AL2</td>\n",
       "      <td>Terry</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Everett</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.95</td>\n",
       "      <td>0.0486</td>\n",
       "      <td>R</td>\n",
       "      <td>NaN</td>\n",
       "      <td>M</td>\n",
       "      <td>102.0</td>\n",
       "      <td>0.95</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>AL</td>\n",
       "      <td>0.47</td>\n",
       "      <td>0.52</td>\n",
       "      <td>AL3</td>\n",
       "      <td>Bob</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Riley</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.93</td>\n",
       "      <td>0.0718</td>\n",
       "      <td>R</td>\n",
       "      <td>NaN</td>\n",
       "      <td>M</td>\n",
       "      <td>103.0</td>\n",
       "      <td>0.93</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>AL</td>\n",
       "      <td>0.37</td>\n",
       "      <td>0.61</td>\n",
       "      <td>AL4</td>\n",
       "      <td>Robert</td>\n",
       "      <td>B.</td>\n",
       "      <td>Aderholt</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.90</td>\n",
       "      <td>0.0986</td>\n",
       "      <td>R</td>\n",
       "      <td>NaN</td>\n",
       "      <td>M</td>\n",
       "      <td>104.0</td>\n",
       "      <td>0.90</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>434</th>\n",
       "      <td>WI</td>\n",
       "      <td>0.43</td>\n",
       "      <td>0.52</td>\n",
       "      <td>WI8</td>\n",
       "      <td>Mark</td>\n",
       "      <td>A.</td>\n",
       "      <td>Green</td>\n",
       "      <td>8.0</td>\n",
       "      <td>0.91</td>\n",
       "      <td>0.0867</td>\n",
       "      <td>R</td>\n",
       "      <td>NaN</td>\n",
       "      <td>M</td>\n",
       "      <td>5508.0</td>\n",
       "      <td>0.91</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>435</th>\n",
       "      <td>WV</td>\n",
       "      <td>0.43</td>\n",
       "      <td>0.54</td>\n",
       "      <td>WV1</td>\n",
       "      <td>Alan</td>\n",
       "      <td>B.</td>\n",
       "      <td>Mollohan</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.82</td>\n",
       "      <td>0.1774</td>\n",
       "      <td>D</td>\n",
       "      <td>NaN</td>\n",
       "      <td>M</td>\n",
       "      <td>5401.0</td>\n",
       "      <td>0.18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>436</th>\n",
       "      <td>WV</td>\n",
       "      <td>0.44</td>\n",
       "      <td>0.54</td>\n",
       "      <td>WV2</td>\n",
       "      <td>Robert</td>\n",
       "      <td>E.</td>\n",
       "      <td>Wise</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.86</td>\n",
       "      <td>0.1372</td>\n",
       "      <td>D</td>\n",
       "      <td>Jr.</td>\n",
       "      <td>M</td>\n",
       "      <td>5402.0</td>\n",
       "      <td>0.14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>437</th>\n",
       "      <td>WV</td>\n",
       "      <td>0.51</td>\n",
       "      <td>0.47</td>\n",
       "      <td>WV3</td>\n",
       "      <td>Nick</td>\n",
       "      <td>J.</td>\n",
       "      <td>Rahall</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.86</td>\n",
       "      <td>0.1390</td>\n",
       "      <td>D</td>\n",
       "      <td>II</td>\n",
       "      <td>M</td>\n",
       "      <td>5403.0</td>\n",
       "      <td>0.14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>438</th>\n",
       "      <td>WY</td>\n",
       "      <td>0.28</td>\n",
       "      <td>0.69</td>\n",
       "      <td>WY1</td>\n",
       "      <td>Barbara</td>\n",
       "      <td>L.</td>\n",
       "      <td>Cubin</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.94</td>\n",
       "      <td>0.0588</td>\n",
       "      <td>R</td>\n",
       "      <td>NaN</td>\n",
       "      <td>F</td>\n",
       "      <td>5600.0</td>\n",
       "      <td>0.94</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>439 rows × 15 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    State  Gore  Bush '00 location first_name middle_name last_name  district  \\\n",
       "0      AK  0.28      0.59      AK1        Don         NaN     Young       1.0   \n",
       "1      AL  0.38      0.60      AL1      Sonny         NaN  Callahan       1.0   \n",
       "2      AL  0.38      0.61      AL2      Terry         NaN   Everett       2.0   \n",
       "3      AL  0.47      0.52      AL3        Bob         NaN     Riley       3.0   \n",
       "4      AL  0.37      0.61      AL4     Robert          B.  Aderholt       4.0   \n",
       "..    ...   ...       ...      ...        ...         ...       ...       ...   \n",
       "434    WI  0.43      0.52      WI8       Mark          A.     Green       8.0   \n",
       "435    WV  0.43      0.54      WV1       Alan          B.  Mollohan       1.0   \n",
       "436    WV  0.44      0.54      WV2     Robert          E.      Wise       2.0   \n",
       "437    WV  0.51      0.47      WV3       Nick          J.    Rahall       3.0   \n",
       "438    WY  0.28      0.69      WY1    Barbara          L.     Cubin       1.0   \n",
       "\n",
       "     votes_with_party_pct  votes_against_party_pct party suffix gender  \\\n",
       "0                    0.92                   0.0757     R    NaN      M   \n",
       "1                    0.94                   0.0589     R    NaN    NaN   \n",
       "2                    0.95                   0.0486     R    NaN      M   \n",
       "3                    0.93                   0.0718     R    NaN      M   \n",
       "4                    0.90                   0.0986     R    NaN      M   \n",
       "..                    ...                      ...   ...    ...    ...   \n",
       "434                  0.91                   0.0867     R    NaN      M   \n",
       "435                  0.82                   0.1774     D    NaN      M   \n",
       "436                  0.86                   0.1372     D    Jr.      M   \n",
       "437                  0.86                   0.1390     D     II      M   \n",
       "438                  0.94                   0.0588     R    NaN      F   \n",
       "\n",
       "      geoid  Member Position  \n",
       "0     200.0             0.92  \n",
       "1     101.0             0.94  \n",
       "2     102.0             0.95  \n",
       "3     103.0             0.93  \n",
       "4     104.0             0.90  \n",
       "..      ...              ...  \n",
       "434  5508.0             0.91  \n",
       "435  5401.0             0.18  \n",
       "436  5402.0             0.14  \n",
       "437  5403.0             0.14  \n",
       "438  5600.0             0.94  \n",
       "\n",
       "[439 rows x 15 columns]"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "filename = \"housedata.csv\"\n",
    "df = pd.read_csv(filename)\n",
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Cleaning Data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Before we can begin manipulating our data to recreate our table, we must first clean the data. The following cells will walk you through dropping unnecessary columns and removing null values that could disrupt our analysis. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Drop Columns"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Since we are mainly interested in the voting patterns of the members and their districts, there are a few columns currently included in df that we can get rid of. First, we'll start with an example. Then, you'll get to write your own code to drop certain columns. \n",
    "\n",
    "Run the following cell to drop the \"geoid\" column:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Gore</th>\n",
       "      <th>Bush '00</th>\n",
       "      <th>location</th>\n",
       "      <th>first_name</th>\n",
       "      <th>middle_name</th>\n",
       "      <th>last_name</th>\n",
       "      <th>district</th>\n",
       "      <th>votes_with_party_pct</th>\n",
       "      <th>votes_against_party_pct</th>\n",
       "      <th>party</th>\n",
       "      <th>suffix</th>\n",
       "      <th>gender</th>\n",
       "      <th>geoid</th>\n",
       "      <th>Member Position</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.28</td>\n",
       "      <td>0.59</td>\n",
       "      <td>AK1</td>\n",
       "      <td>Don</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Young</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.92</td>\n",
       "      <td>0.0757</td>\n",
       "      <td>R</td>\n",
       "      <td>NaN</td>\n",
       "      <td>M</td>\n",
       "      <td>200.0</td>\n",
       "      <td>0.92</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.38</td>\n",
       "      <td>0.60</td>\n",
       "      <td>AL1</td>\n",
       "      <td>Sonny</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Callahan</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.94</td>\n",
       "      <td>0.0589</td>\n",
       "      <td>R</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>101.0</td>\n",
       "      <td>0.94</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.38</td>\n",
       "      <td>0.61</td>\n",
       "      <td>AL2</td>\n",
       "      <td>Terry</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Everett</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.95</td>\n",
       "      <td>0.0486</td>\n",
       "      <td>R</td>\n",
       "      <td>NaN</td>\n",
       "      <td>M</td>\n",
       "      <td>102.0</td>\n",
       "      <td>0.95</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.47</td>\n",
       "      <td>0.52</td>\n",
       "      <td>AL3</td>\n",
       "      <td>Bob</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Riley</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.93</td>\n",
       "      <td>0.0718</td>\n",
       "      <td>R</td>\n",
       "      <td>NaN</td>\n",
       "      <td>M</td>\n",
       "      <td>103.0</td>\n",
       "      <td>0.93</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.37</td>\n",
       "      <td>0.61</td>\n",
       "      <td>AL4</td>\n",
       "      <td>Robert</td>\n",
       "      <td>B.</td>\n",
       "      <td>Aderholt</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.90</td>\n",
       "      <td>0.0986</td>\n",
       "      <td>R</td>\n",
       "      <td>NaN</td>\n",
       "      <td>M</td>\n",
       "      <td>104.0</td>\n",
       "      <td>0.90</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>434</th>\n",
       "      <td>0.43</td>\n",
       "      <td>0.52</td>\n",
       "      <td>WI8</td>\n",
       "      <td>Mark</td>\n",
       "      <td>A.</td>\n",
       "      <td>Green</td>\n",
       "      <td>8.0</td>\n",
       "      <td>0.91</td>\n",
       "      <td>0.0867</td>\n",
       "      <td>R</td>\n",
       "      <td>NaN</td>\n",
       "      <td>M</td>\n",
       "      <td>5508.0</td>\n",
       "      <td>0.91</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>435</th>\n",
       "      <td>0.43</td>\n",
       "      <td>0.54</td>\n",
       "      <td>WV1</td>\n",
       "      <td>Alan</td>\n",
       "      <td>B.</td>\n",
       "      <td>Mollohan</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.82</td>\n",
       "      <td>0.1774</td>\n",
       "      <td>D</td>\n",
       "      <td>NaN</td>\n",
       "      <td>M</td>\n",
       "      <td>5401.0</td>\n",
       "      <td>0.18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>436</th>\n",
       "      <td>0.44</td>\n",
       "      <td>0.54</td>\n",
       "      <td>WV2</td>\n",
       "      <td>Robert</td>\n",
       "      <td>E.</td>\n",
       "      <td>Wise</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.86</td>\n",
       "      <td>0.1372</td>\n",
       "      <td>D</td>\n",
       "      <td>Jr.</td>\n",
       "      <td>M</td>\n",
       "      <td>5402.0</td>\n",
       "      <td>0.14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>437</th>\n",
       "      <td>0.51</td>\n",
       "      <td>0.47</td>\n",
       "      <td>WV3</td>\n",
       "      <td>Nick</td>\n",
       "      <td>J.</td>\n",
       "      <td>Rahall</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.86</td>\n",
       "      <td>0.1390</td>\n",
       "      <td>D</td>\n",
       "      <td>II</td>\n",
       "      <td>M</td>\n",
       "      <td>5403.0</td>\n",
       "      <td>0.14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>438</th>\n",
       "      <td>0.28</td>\n",
       "      <td>0.69</td>\n",
       "      <td>WY1</td>\n",
       "      <td>Barbara</td>\n",
       "      <td>L.</td>\n",
       "      <td>Cubin</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.94</td>\n",
       "      <td>0.0588</td>\n",
       "      <td>R</td>\n",
       "      <td>NaN</td>\n",
       "      <td>F</td>\n",
       "      <td>5600.0</td>\n",
       "      <td>0.94</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>439 rows × 14 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Gore  Bush '00 location first_name middle_name last_name  district  \\\n",
       "0    0.28      0.59      AK1        Don         NaN     Young       1.0   \n",
       "1    0.38      0.60      AL1      Sonny         NaN  Callahan       1.0   \n",
       "2    0.38      0.61      AL2      Terry         NaN   Everett       2.0   \n",
       "3    0.47      0.52      AL3        Bob         NaN     Riley       3.0   \n",
       "4    0.37      0.61      AL4     Robert          B.  Aderholt       4.0   \n",
       "..    ...       ...      ...        ...         ...       ...       ...   \n",
       "434  0.43      0.52      WI8       Mark          A.     Green       8.0   \n",
       "435  0.43      0.54      WV1       Alan          B.  Mollohan       1.0   \n",
       "436  0.44      0.54      WV2     Robert          E.      Wise       2.0   \n",
       "437  0.51      0.47      WV3       Nick          J.    Rahall       3.0   \n",
       "438  0.28      0.69      WY1    Barbara          L.     Cubin       1.0   \n",
       "\n",
       "     votes_with_party_pct  votes_against_party_pct party suffix gender  \\\n",
       "0                    0.92                   0.0757     R    NaN      M   \n",
       "1                    0.94                   0.0589     R    NaN    NaN   \n",
       "2                    0.95                   0.0486     R    NaN      M   \n",
       "3                    0.93                   0.0718     R    NaN      M   \n",
       "4                    0.90                   0.0986     R    NaN      M   \n",
       "..                    ...                      ...   ...    ...    ...   \n",
       "434                  0.91                   0.0867     R    NaN      M   \n",
       "435                  0.82                   0.1774     D    NaN      M   \n",
       "436                  0.86                   0.1372     D    Jr.      M   \n",
       "437                  0.86                   0.1390     D     II      M   \n",
       "438                  0.94                   0.0588     R    NaN      F   \n",
       "\n",
       "      geoid  Member Position  \n",
       "0     200.0             0.92  \n",
       "1     101.0             0.94  \n",
       "2     102.0             0.95  \n",
       "3     103.0             0.93  \n",
       "4     104.0             0.90  \n",
       "..      ...              ...  \n",
       "434  5508.0             0.91  \n",
       "435  5401.0             0.18  \n",
       "436  5402.0             0.14  \n",
       "437  5403.0             0.14  \n",
       "438  5600.0             0.94  \n",
       "\n",
       "[439 rows x 14 columns]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Example\n",
    "df = df.drop(['State'], axis=1)\n",
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now it's your turn! In the following cell, write some code that drops the following columns: suffix, gender, geoid, district"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Gore</th>\n",
       "      <th>Bush '00</th>\n",
       "      <th>location</th>\n",
       "      <th>first_name</th>\n",
       "      <th>middle_name</th>\n",
       "      <th>last_name</th>\n",
       "      <th>votes_with_party_pct</th>\n",
       "      <th>votes_against_party_pct</th>\n",
       "      <th>party</th>\n",
       "      <th>Member Position</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.28</td>\n",
       "      <td>0.59</td>\n",
       "      <td>AK1</td>\n",
       "      <td>Don</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Young</td>\n",
       "      <td>0.92</td>\n",
       "      <td>0.0757</td>\n",
       "      <td>R</td>\n",
       "      <td>0.92</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.38</td>\n",
       "      <td>0.60</td>\n",
       "      <td>AL1</td>\n",
       "      <td>Sonny</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Callahan</td>\n",
       "      <td>0.94</td>\n",
       "      <td>0.0589</td>\n",
       "      <td>R</td>\n",
       "      <td>0.94</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.38</td>\n",
       "      <td>0.61</td>\n",
       "      <td>AL2</td>\n",
       "      <td>Terry</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Everett</td>\n",
       "      <td>0.95</td>\n",
       "      <td>0.0486</td>\n",
       "      <td>R</td>\n",
       "      <td>0.95</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.47</td>\n",
       "      <td>0.52</td>\n",
       "      <td>AL3</td>\n",
       "      <td>Bob</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Riley</td>\n",
       "      <td>0.93</td>\n",
       "      <td>0.0718</td>\n",
       "      <td>R</td>\n",
       "      <td>0.93</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.37</td>\n",
       "      <td>0.61</td>\n",
       "      <td>AL4</td>\n",
       "      <td>Robert</td>\n",
       "      <td>B.</td>\n",
       "      <td>Aderholt</td>\n",
       "      <td>0.90</td>\n",
       "      <td>0.0986</td>\n",
       "      <td>R</td>\n",
       "      <td>0.90</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>434</th>\n",
       "      <td>0.43</td>\n",
       "      <td>0.52</td>\n",
       "      <td>WI8</td>\n",
       "      <td>Mark</td>\n",
       "      <td>A.</td>\n",
       "      <td>Green</td>\n",
       "      <td>0.91</td>\n",
       "      <td>0.0867</td>\n",
       "      <td>R</td>\n",
       "      <td>0.91</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>435</th>\n",
       "      <td>0.43</td>\n",
       "      <td>0.54</td>\n",
       "      <td>WV1</td>\n",
       "      <td>Alan</td>\n",
       "      <td>B.</td>\n",
       "      <td>Mollohan</td>\n",
       "      <td>0.82</td>\n",
       "      <td>0.1774</td>\n",
       "      <td>D</td>\n",
       "      <td>0.18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>436</th>\n",
       "      <td>0.44</td>\n",
       "      <td>0.54</td>\n",
       "      <td>WV2</td>\n",
       "      <td>Robert</td>\n",
       "      <td>E.</td>\n",
       "      <td>Wise</td>\n",
       "      <td>0.86</td>\n",
       "      <td>0.1372</td>\n",
       "      <td>D</td>\n",
       "      <td>0.14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>437</th>\n",
       "      <td>0.51</td>\n",
       "      <td>0.47</td>\n",
       "      <td>WV3</td>\n",
       "      <td>Nick</td>\n",
       "      <td>J.</td>\n",
       "      <td>Rahall</td>\n",
       "      <td>0.86</td>\n",
       "      <td>0.1390</td>\n",
       "      <td>D</td>\n",
       "      <td>0.14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>438</th>\n",
       "      <td>0.28</td>\n",
       "      <td>0.69</td>\n",
       "      <td>WY1</td>\n",
       "      <td>Barbara</td>\n",
       "      <td>L.</td>\n",
       "      <td>Cubin</td>\n",
       "      <td>0.94</td>\n",
       "      <td>0.0588</td>\n",
       "      <td>R</td>\n",
       "      <td>0.94</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>439 rows × 10 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Gore  Bush '00 location first_name middle_name last_name  \\\n",
       "0    0.28      0.59      AK1        Don         NaN     Young   \n",
       "1    0.38      0.60      AL1      Sonny         NaN  Callahan   \n",
       "2    0.38      0.61      AL2      Terry         NaN   Everett   \n",
       "3    0.47      0.52      AL3        Bob         NaN     Riley   \n",
       "4    0.37      0.61      AL4     Robert          B.  Aderholt   \n",
       "..    ...       ...      ...        ...         ...       ...   \n",
       "434  0.43      0.52      WI8       Mark          A.     Green   \n",
       "435  0.43      0.54      WV1       Alan          B.  Mollohan   \n",
       "436  0.44      0.54      WV2     Robert          E.      Wise   \n",
       "437  0.51      0.47      WV3       Nick          J.    Rahall   \n",
       "438  0.28      0.69      WY1    Barbara          L.     Cubin   \n",
       "\n",
       "     votes_with_party_pct  votes_against_party_pct party  Member Position  \n",
       "0                    0.92                   0.0757     R             0.92  \n",
       "1                    0.94                   0.0589     R             0.94  \n",
       "2                    0.95                   0.0486     R             0.95  \n",
       "3                    0.93                   0.0718     R             0.93  \n",
       "4                    0.90                   0.0986     R             0.90  \n",
       "..                    ...                      ...   ...              ...  \n",
       "434                  0.91                   0.0867     R             0.91  \n",
       "435                  0.82                   0.1774     D             0.18  \n",
       "436                  0.86                   0.1372     D             0.14  \n",
       "437                  0.86                   0.1390     D             0.14  \n",
       "438                  0.94                   0.0588     R             0.94  \n",
       "\n",
       "[439 rows x 10 columns]"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Use this cell to drop the specified columns\n",
    "#...\n",
    "df = df.drop(['suffix', 'gender', 'geoid', 'district'], axis=1)\n",
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Great job! You have successfully dropped all unneeded columns."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Removing Null Values"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Taking a look at the dataset, we'll see that some rows contain \"NaN\" in the last_name column. For the purpose of our analysis, we want to exclude these rows because they can disrupt what we are able to do with the data. \n",
    "\n",
    "The following cell provides an example for how you can drop rows containing \"NaN\" in the first_name column."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Gore</th>\n",
       "      <th>Bush '00</th>\n",
       "      <th>location</th>\n",
       "      <th>first_name</th>\n",
       "      <th>middle_name</th>\n",
       "      <th>last_name</th>\n",
       "      <th>votes_with_party_pct</th>\n",
       "      <th>votes_against_party_pct</th>\n",
       "      <th>party</th>\n",
       "      <th>Member Position</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.28</td>\n",
       "      <td>0.59</td>\n",
       "      <td>AK1</td>\n",
       "      <td>Don</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Young</td>\n",
       "      <td>0.92</td>\n",
       "      <td>0.0757</td>\n",
       "      <td>R</td>\n",
       "      <td>0.92</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.38</td>\n",
       "      <td>0.60</td>\n",
       "      <td>AL1</td>\n",
       "      <td>Sonny</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Callahan</td>\n",
       "      <td>0.94</td>\n",
       "      <td>0.0589</td>\n",
       "      <td>R</td>\n",
       "      <td>0.94</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.38</td>\n",
       "      <td>0.61</td>\n",
       "      <td>AL2</td>\n",
       "      <td>Terry</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Everett</td>\n",
       "      <td>0.95</td>\n",
       "      <td>0.0486</td>\n",
       "      <td>R</td>\n",
       "      <td>0.95</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.47</td>\n",
       "      <td>0.52</td>\n",
       "      <td>AL3</td>\n",
       "      <td>Bob</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Riley</td>\n",
       "      <td>0.93</td>\n",
       "      <td>0.0718</td>\n",
       "      <td>R</td>\n",
       "      <td>0.93</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.37</td>\n",
       "      <td>0.61</td>\n",
       "      <td>AL4</td>\n",
       "      <td>Robert</td>\n",
       "      <td>B.</td>\n",
       "      <td>Aderholt</td>\n",
       "      <td>0.90</td>\n",
       "      <td>0.0986</td>\n",
       "      <td>R</td>\n",
       "      <td>0.90</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>434</th>\n",
       "      <td>0.43</td>\n",
       "      <td>0.52</td>\n",
       "      <td>WI8</td>\n",
       "      <td>Mark</td>\n",
       "      <td>A.</td>\n",
       "      <td>Green</td>\n",
       "      <td>0.91</td>\n",
       "      <td>0.0867</td>\n",
       "      <td>R</td>\n",
       "      <td>0.91</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>435</th>\n",
       "      <td>0.43</td>\n",
       "      <td>0.54</td>\n",
       "      <td>WV1</td>\n",
       "      <td>Alan</td>\n",
       "      <td>B.</td>\n",
       "      <td>Mollohan</td>\n",
       "      <td>0.82</td>\n",
       "      <td>0.1774</td>\n",
       "      <td>D</td>\n",
       "      <td>0.18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>436</th>\n",
       "      <td>0.44</td>\n",
       "      <td>0.54</td>\n",
       "      <td>WV2</td>\n",
       "      <td>Robert</td>\n",
       "      <td>E.</td>\n",
       "      <td>Wise</td>\n",
       "      <td>0.86</td>\n",
       "      <td>0.1372</td>\n",
       "      <td>D</td>\n",
       "      <td>0.14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>437</th>\n",
       "      <td>0.51</td>\n",
       "      <td>0.47</td>\n",
       "      <td>WV3</td>\n",
       "      <td>Nick</td>\n",
       "      <td>J.</td>\n",
       "      <td>Rahall</td>\n",
       "      <td>0.86</td>\n",
       "      <td>0.1390</td>\n",
       "      <td>D</td>\n",
       "      <td>0.14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>438</th>\n",
       "      <td>0.28</td>\n",
       "      <td>0.69</td>\n",
       "      <td>WY1</td>\n",
       "      <td>Barbara</td>\n",
       "      <td>L.</td>\n",
       "      <td>Cubin</td>\n",
       "      <td>0.94</td>\n",
       "      <td>0.0588</td>\n",
       "      <td>R</td>\n",
       "      <td>0.94</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>424 rows × 10 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Gore  Bush '00 location first_name middle_name last_name  \\\n",
       "0    0.28      0.59      AK1        Don         NaN     Young   \n",
       "1    0.38      0.60      AL1      Sonny         NaN  Callahan   \n",
       "2    0.38      0.61      AL2      Terry         NaN   Everett   \n",
       "3    0.47      0.52      AL3        Bob         NaN     Riley   \n",
       "4    0.37      0.61      AL4     Robert          B.  Aderholt   \n",
       "..    ...       ...      ...        ...         ...       ...   \n",
       "434  0.43      0.52      WI8       Mark          A.     Green   \n",
       "435  0.43      0.54      WV1       Alan          B.  Mollohan   \n",
       "436  0.44      0.54      WV2     Robert          E.      Wise   \n",
       "437  0.51      0.47      WV3       Nick          J.    Rahall   \n",
       "438  0.28      0.69      WY1    Barbara          L.     Cubin   \n",
       "\n",
       "     votes_with_party_pct  votes_against_party_pct party  Member Position  \n",
       "0                    0.92                   0.0757     R             0.92  \n",
       "1                    0.94                   0.0589     R             0.94  \n",
       "2                    0.95                   0.0486     R             0.95  \n",
       "3                    0.93                   0.0718     R             0.93  \n",
       "4                    0.90                   0.0986     R             0.90  \n",
       "..                    ...                      ...   ...              ...  \n",
       "434                  0.91                   0.0867     R             0.91  \n",
       "435                  0.82                   0.1774     D             0.18  \n",
       "436                  0.86                   0.1372     D             0.14  \n",
       "437                  0.86                   0.1390     D             0.14  \n",
       "438                  0.94                   0.0588     R             0.94  \n",
       "\n",
       "[424 rows x 10 columns]"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Example\n",
    "df.dropna(subset=['first_name'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now it's your turn! Write some code that will drop rows containing \"NaN\" in the last_name column."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Gore</th>\n",
       "      <th>Bush '00</th>\n",
       "      <th>location</th>\n",
       "      <th>first_name</th>\n",
       "      <th>middle_name</th>\n",
       "      <th>last_name</th>\n",
       "      <th>votes_with_party_pct</th>\n",
       "      <th>votes_against_party_pct</th>\n",
       "      <th>party</th>\n",
       "      <th>Member Position</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.28</td>\n",
       "      <td>0.59</td>\n",
       "      <td>AK1</td>\n",
       "      <td>Don</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Young</td>\n",
       "      <td>0.92</td>\n",
       "      <td>0.0757</td>\n",
       "      <td>R</td>\n",
       "      <td>0.92</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.38</td>\n",
       "      <td>0.60</td>\n",
       "      <td>AL1</td>\n",
       "      <td>Sonny</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Callahan</td>\n",
       "      <td>0.94</td>\n",
       "      <td>0.0589</td>\n",
       "      <td>R</td>\n",
       "      <td>0.94</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.38</td>\n",
       "      <td>0.61</td>\n",
       "      <td>AL2</td>\n",
       "      <td>Terry</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Everett</td>\n",
       "      <td>0.95</td>\n",
       "      <td>0.0486</td>\n",
       "      <td>R</td>\n",
       "      <td>0.95</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.47</td>\n",
       "      <td>0.52</td>\n",
       "      <td>AL3</td>\n",
       "      <td>Bob</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Riley</td>\n",
       "      <td>0.93</td>\n",
       "      <td>0.0718</td>\n",
       "      <td>R</td>\n",
       "      <td>0.93</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.37</td>\n",
       "      <td>0.61</td>\n",
       "      <td>AL4</td>\n",
       "      <td>Robert</td>\n",
       "      <td>B.</td>\n",
       "      <td>Aderholt</td>\n",
       "      <td>0.90</td>\n",
       "      <td>0.0986</td>\n",
       "      <td>R</td>\n",
       "      <td>0.90</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>434</th>\n",
       "      <td>0.43</td>\n",
       "      <td>0.52</td>\n",
       "      <td>WI8</td>\n",
       "      <td>Mark</td>\n",
       "      <td>A.</td>\n",
       "      <td>Green</td>\n",
       "      <td>0.91</td>\n",
       "      <td>0.0867</td>\n",
       "      <td>R</td>\n",
       "      <td>0.91</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>435</th>\n",
       "      <td>0.43</td>\n",
       "      <td>0.54</td>\n",
       "      <td>WV1</td>\n",
       "      <td>Alan</td>\n",
       "      <td>B.</td>\n",
       "      <td>Mollohan</td>\n",
       "      <td>0.82</td>\n",
       "      <td>0.1774</td>\n",
       "      <td>D</td>\n",
       "      <td>0.18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>436</th>\n",
       "      <td>0.44</td>\n",
       "      <td>0.54</td>\n",
       "      <td>WV2</td>\n",
       "      <td>Robert</td>\n",
       "      <td>E.</td>\n",
       "      <td>Wise</td>\n",
       "      <td>0.86</td>\n",
       "      <td>0.1372</td>\n",
       "      <td>D</td>\n",
       "      <td>0.14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>437</th>\n",
       "      <td>0.51</td>\n",
       "      <td>0.47</td>\n",
       "      <td>WV3</td>\n",
       "      <td>Nick</td>\n",
       "      <td>J.</td>\n",
       "      <td>Rahall</td>\n",
       "      <td>0.86</td>\n",
       "      <td>0.1390</td>\n",
       "      <td>D</td>\n",
       "      <td>0.14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>438</th>\n",
       "      <td>0.28</td>\n",
       "      <td>0.69</td>\n",
       "      <td>WY1</td>\n",
       "      <td>Barbara</td>\n",
       "      <td>L.</td>\n",
       "      <td>Cubin</td>\n",
       "      <td>0.94</td>\n",
       "      <td>0.0588</td>\n",
       "      <td>R</td>\n",
       "      <td>0.94</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>424 rows × 10 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Gore  Bush '00 location first_name middle_name last_name  \\\n",
       "0    0.28      0.59      AK1        Don         NaN     Young   \n",
       "1    0.38      0.60      AL1      Sonny         NaN  Callahan   \n",
       "2    0.38      0.61      AL2      Terry         NaN   Everett   \n",
       "3    0.47      0.52      AL3        Bob         NaN     Riley   \n",
       "4    0.37      0.61      AL4     Robert          B.  Aderholt   \n",
       "..    ...       ...      ...        ...         ...       ...   \n",
       "434  0.43      0.52      WI8       Mark          A.     Green   \n",
       "435  0.43      0.54      WV1       Alan          B.  Mollohan   \n",
       "436  0.44      0.54      WV2     Robert          E.      Wise   \n",
       "437  0.51      0.47      WV3       Nick          J.    Rahall   \n",
       "438  0.28      0.69      WY1    Barbara          L.     Cubin   \n",
       "\n",
       "     votes_with_party_pct  votes_against_party_pct party  Member Position  \n",
       "0                    0.92                   0.0757     R             0.92  \n",
       "1                    0.94                   0.0589     R             0.94  \n",
       "2                    0.95                   0.0486     R             0.95  \n",
       "3                    0.93                   0.0718     R             0.93  \n",
       "4                    0.90                   0.0986     R             0.90  \n",
       "..                    ...                      ...   ...              ...  \n",
       "434                  0.91                   0.0867     R             0.91  \n",
       "435                  0.82                   0.1774     D             0.18  \n",
       "436                  0.86                   0.1372     D             0.14  \n",
       "437                  0.86                   0.1390     D             0.14  \n",
       "438                  0.94                   0.0588     R             0.94  \n",
       "\n",
       "[424 rows x 10 columns]"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Use this cell to drop rows in the last_name column containing \"NaN\"\n",
    "#df = ...\n",
    "#df\n",
    "df = df.dropna(subset=['last_name'])\n",
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Graphing the Data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This section will walk you through how to create a scatterplot and fit linear regressions to our data. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Democratic slope: 0.15687461066120845\n",
      "Republican slope: 0.13827041986315086\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 408.1x360 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Graphing the scatterplot\n",
    "sns.lmplot(x=\"Bush '00\", y='Member Position', hue=\"party\", \n",
    "           data=df,markers=[\"o\", \"x\"], palette=\"Set1\")\n",
    "\n",
    "#Adjusting scatterplot labels\n",
    "sns.set(style='ticks')\n",
    "plt.xlabel(\"District Conservatism\")\n",
    "plt.ylabel(\"Member's Position\")\n",
    "plt.title(\"Member's Position in 2000 by District Conservatism\")\n",
    "\n",
    "#Adding regression line analysis\n",
    "democrats = df[df.party == 'D']\n",
    "republicans = df[df.party == 'R']\n",
    "d = linregress(democrats[\"Bush '00\"], democrats[\"Member Position\"])\n",
    "r = linregress(republicans[\"Bush '00\"], republicans[\"Member Position\"])\n",
    "print(\"Democratic slope: \" + str(d.slope))\n",
    "print(\"Republican slope: \" + str(r.slope))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Observations"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now that we've successfully recreated the graph, it's time to make some observations and inferences based on what we see. Pleasee write a brief 1-2 sentence answer for each of the following questions:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1. Interpret the slopes of the regressions for the Republican data clump and the Democrat data clump. No need to get too specific mathmatically, just observe the general trend and think about what it suggests about the relationship between candidate's position taking and their district's political leanings. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "*Question 1 answer here*"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "2. Politically, why might we see the trends displayed in the graph?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "*Question 2 answer here*"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## The End"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Congratulations! You have finished this lab on House candidate positioning."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
